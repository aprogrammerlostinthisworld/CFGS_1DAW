public class lista {

	//Clase privada CElemento que guarda cada uno de los elementos de la lista
	private class CElemento{
		private int dato;
		private CElemento anterior;
		
		public CElemento(int d){
			this.dato = d;
			anterior = null;
		}
	}
	
	private CElemento lista;
	private int numElem;
	
	public lista(){
		lista = null;
		numElem = 0;
	}
	
	//Metodo size que devuelve el tamaño de la lista
	public int size(){
		return numElem;
	}
	
	//Metodo insertar que inserta en la lista por la posicion
	//que le pasemos por parametro
	public void insertar(int pos, int dig){
		CElemento nuevo = new CElemento(dig);
		int i = 0;
		if(listaVacia()){
			lista = nuevo;
		}else{
			while((nuevo.anterior != null)&&((size()-1>pos)&&(i<pos))){
				nuevo = nuevo.anterior;
				i++;
			}
			lista.anterior = nuevo;
		}
		numElem++;
	}
	
	//Metodo borrar que borra un elemento de la posicion
	//que le pasemos por parametro
	public void supr(int pos){
		CElemento aux = lista;
		int i = 0;
		if(!listaVacia()){
			while((aux.anterior != null)&&(size()-1>pos)&&(i<pos)){
				aux = aux.anterior;
				i++;
			}
			lista.anterior = aux.anterior;
			aux.anterior = aux;
			numElem--;
		}
	}
	
	//Metodo obtener que devuelve el dato del elemento de la
	//posicion que le pasemos por paramentro
	public int obtener(int pos){
		CElemento aux = lista;
		int i = 0, dig = 0;
		if(!listaVacia()){
			while((aux.anterior != null)&&(size()>pos)&&(i<pos)){
				aux = aux.anterior;
				i++;
			}
		}
		dig = aux.dato;
		return dig;
	}
	
	//Metodo listaVacia que nos devuelve true o false si la
	//lista esta vacia o no
	public boolean listaVacia(){
		return (numElem == 0);
	}
}