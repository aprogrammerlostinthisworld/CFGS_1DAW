#Sun May 27 20:29:50 CEST 2012
content_assist_proposals_foreground=0,0,0
spelling_locale_initialized=true
spelling_ignore_urls=true
content_assist_disabled_computers=org.eclipse.jdt.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaNoTypeProposalCategory\u0000org.eclipse.jdt.ui.textProposalCategory\u0000org.eclipse.jdt.ui.javaTypeProposalCategory\u0000
markOccurrences=false
spelling_ignore_non_letters=true
org.eclipse.jdt.ui.text.templates_migrated=true
spelling_ignore_ampersand_in_properties=true
useAnnotationsPrefPage=true
eclipse.preferences.version=1
org.eclipse.jface.textfont=1|Consolas|10.0|0|WINDOWS|1|0|0|0|0|0|0|0|0|1|0|0|0|0|Consolas;
tabWidthPropagated=true
org.eclipse.jdt.ui.editor.tab.width=
spelling_ignore_single_letters=true
fontPropagated=true
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates/>
org.eclipse.jdt.ui.javadoclocations.migrated=true
proposalOrderMigrated=true
spelling_user_dictionary_encoding=
spelling_ignore_mixed=true
spelling_ignore_java_strings=true
org.eclipse.jdt.ui.formatterprofiles.version=12
content_assist_proposals_background=255,255,255
content_assist_number_of_computers=20
spelling_ignore_digits=true
spelling_ignore_upper=true
useQuickDiffPrefPage=true
org.eclipse.jdt.ui.text.custom_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="java" deleted\="false" description\="iterate over array" enabled\="true" id\="org.eclipse.jdt.ui.templates.for_array" name\="for">for (int ${index} \= 0; ${index} &lt; ${array}.length; ${index}++) {\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="iterate with iterator" enabled\="true" id\="org.eclipse.jdt.ui.templates.while_iterator" name\="while">while (${it\:var(java.util.Iterator)}.hasNext()) {\r\n\t${type\:argType(it)} ${elem\:newName(type)} \= (${type}) ${it}.next();\r\n\t${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="if statement" enabled\="true" id\="org.eclipse.jdt.ui.templates.if" name\="if">if (${condition\:var(boolean)}) {\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="if else statement" enabled\="true" id\="org.eclipse.jdt.ui.templates.ifelse" name\="ifelse">if (${condition\:var(boolean)}) {\r\n\t${cursor}\r\n} else {\r\n\t\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="try catch block" enabled\="true" id\="org.eclipse.jdt.ui.templates.try" name\="try">try {\r\n\t${line_selection}${cursor}\r\n} catch (${Exception} ${exception_variable_name}) {\r\n\t// ${todo}\: handle exception\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="main method" enabled\="true" id\="org.eclipse.jdt.ui.templates.main" name\="main">public static void main(String[] args) {\r\n\t${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="dynamic type test and cast" enabled\="true" id\="org.eclipse.jdt.ui.templates.instanceof" name\="instanceof">if (${name\:var} instanceof ${type}) {\r\n\t${type} ${new_name} \= (${type})${name};\r\n\t${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="Crear array y meter elementos" enabled\="true" name\="arrays">public int[]array;&\#13;\r\n\tpublic int numarray;&\#13;\r\n\tpublic final int TAMARRAY;&\#13;\r\n&\#13;\r\n\t//Constructor&\#13;\r\n\tpublic seleccion(){&\#13;\r\n\t\tTAMARRAY \= 3;&\#13;\r\n\t\tarray \= new int[TAMARRAY];&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic int getNumarray(){&\#13;\r\n\t\treturn numarray;&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic int getTAMARRAY(){&\#13;\r\n\t\treturn TAMARRAY;&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\t//Aniadir valores al array&\#13;\r\n\tpublic void anadirnum(int num){&\#13;\r\n\t\tarray[numarray] \= num;&\#13;\r\n\t\tnumarray++;&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="Clase con el metodo quicksort" enabled\="true" name\="quicksort">public class quicksorts {&\#13;\r\n\t&\#13;\r\n    public int[] quicksort(int numeros[]){&\#13;\r\n        return quicksort(numeros,0,numeros.length-1);&\#13;\r\n    }&\#13;\r\n    &\#13;\r\n    public int[] quicksort(int numeros[],int izq,int der){&\#13;\r\n        if(izq&gt;\=der)&\#13;\r\n            return numeros;&\#13;\r\n        int i\=izq,d\=der;&\#13;\r\n        if(izq\!\=der){&\#13;\r\n        \tint pivote;&\#13;\r\n        \tint aux;&\#13;\r\n        \tpivote \= izq;&\#13;\r\n        \twhile(izq\!\=der){&\#13;\r\n        \t\timprimeArreglo(numeros);&\#13;\r\n        \t\twhile(numeros[der]&gt;\=numeros[pivote] &amp;&amp; izq&lt;der)&\#13;\r\n        \t\t\tder--;&\#13;\r\n        \t\twhile(numeros[izq]&lt;numeros[pivote] &amp;&amp; izq&lt;der)&\#13;\r\n        \t\t\tizq++;&\#13;\r\n           &\#13;\r\n        \t\tif(der\!\=izq){&\#13;\r\n        \t\t\taux \= numeros[der];&\#13;\r\n        \t\t\tnumeros[der]\= numeros[izq];&\#13;\r\n        \t\t\tnumeros[izq]\=aux;&\#13;\r\n        \t\t}&\#13;\r\n        \t}&\#13;\r\n        \tif(izq\=\=der){&\#13;\r\n        \t\tquicksort(numeros,i,izq-1);&\#13;\r\n        \t\tquicksort(numeros,izq+1,d);&\#13;\r\n        \t}&\#13;\r\n        }else&\#13;\r\n            return numeros;&\#13;\r\n       return numeros;&\#13;\r\n    }&\#13;\r\n&\#13;\r\n    public void imprimeArreglo(int arreglo[]){&\#13;\r\n        String imp\="";&\#13;\r\n        int i;&\#13;\r\n        for(i\=0;i&lt;arreglo.length;i++){&\#13;\r\n            if(i\!\=arreglo.length-1)&\#13;\r\n            \timp\=imp+arreglo[i]+",";&\#13;\r\n            else&\#13;\r\n                imp\=imp+arreglo[i]+"";&\#13;\r\n        }&\#13;\r\n        System.out.println(imp);&\#13;\r\n    }</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="iterate over array with temporary variable" enabled\="true" name\="for2">for (int ${index} \= 0; ${index} &lt; ${array}.length; ${index}++) {\r\n\t${array_type} ${array_element} \= ${array}[${index}];\r\n\t${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="b" enabled\="true" name\="burbuja">public void BurbujaEficiente(){&\#13;\r\n\t\tint aux;&\#13;\r\n\t\tint i\=array.length-1;&\#13;\r\n\t\tint j;&\#13;\r\n\t\tboolean comprobar \= true;&\#13;\r\n\t\twhile((comprobar) &amp;&amp; (i &gt; 0)){&\#13;\r\n\t\t\tj\=0;&\#13;\r\n\t\t\tcomprobar \= false;&\#13;\r\n\t\t\twhile (j &lt; i){&\#13;\r\n\t\t\t\tif(array[j] &gt; array[j+1]){&\#13;\r\n\t\t\t\t\taux \= array[j];&\#13;\r\n\t\t\t\t\tarray[j] \= array[j+1];&\#13;\r\n\t\t\t\t\tarray[j+1] \= aux;&\#13;\r\n\t\t\t\t\tcomprobar \= true;&\#13;\r\n\t\t\t\t}&\#13;\r\n\t\t\t\tj++;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\ti--;&\#13;\r\n\t\t}&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="s" enabled\="true" name\="seleccion">public void Seleccion(){&\#13;\r\n\t\tint aux;&\#13;\r\n\t\tint minimo;&\#13;\r\n\t\tfor (int i \= 0; i &lt; array.length - 1; i++){&\#13;\r\n\t\t\tminimo \= i;&\#13;\r\n            for (int j \= i + 1; j &lt; array.length; j++){&\#13;\r\n            \tif (array[j] &lt; array[minimo]){&\#13;\r\n            \t\tminimo \= j;&\#13;\r\n                }&\#13;\r\n            }&\#13;\r\n\t        if (i \!\= minimo){&\#13;\r\n\t        \taux\= array[i];&\#13;\r\n\t        \tarray[i] \= array[minimo];&\#13;\r\n\t        \tarray[minimo] \= aux;&\#13;\r\n            }&\#13;\r\n        }&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="iterate over array with temporary variable" enabled\="true" name\="for1">for (int ${index} \= 0; ${index} &lt; ${array}.length; ${index}++) {\r\n\t${array_type} ${array_element} \= ${array}[${index}];\r\n\t${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="i" enabled\="true" name\="insersion">public void Insersion(){&\#13;\r\n\t\tint aux;&\#13;\r\n\t\tint j;&\#13;\r\n\t\tfor(int i\=1; i&lt;array.length; i++){&\#13;\r\n\t\t\taux\=array[i];&\#13;\r\n\t\t\tj \= i-1;&\#13;\r\n\t\t\twhile((j&gt;\=0) &amp;&amp; (aux&lt;array[j])){&\#13;\r\n\t\t\t\tarray[j+1]\=array[j];&\#13;\r\n\t\t\t\tj--;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\tarray[j+1]\=aux;&\#13;\r\n\t\t}&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="a" enabled\="true" name\="aleatorio">public int getaleatorio(){&\#13;\r\n\t\treturn (int) (Math.random()*TAMARRAY);&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="b" enabled\="true" name\="bidimensional">private int [][]array;&\#13;\r\n\tprivate final int TAMARRAY \= 10;&\#13;\r\n\t&\#13;\r\n\tpublic CSilla(){&\#13;\r\n\t\tarray \= new int[TAMARRAY][TAMARRAY];&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic int getTAMATRIZ() {&\#13;\r\n\t\treturn TAMARRAY;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void rellenar(int num){&\#13;\r\n\t\tfor(int i\=0;i&lt;\=TAMARRAY;i++){&\#13;\r\n\t\t\tfor (int j\=0;j&lt;TAMARRAY;j++) {&\#13;\r\n\t\t\t\tarray[i][j] \= num;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}\t&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void mostrar(){&\#13;\r\n\t\tfor (int i\=0;i&lt;TAMARRAY;i++) {&\#13;\r\n\t\t\tfor (int j\=0;j&lt;TAMARRAY;j++) {&\#13;\r\n\t\t\t\tSystem.out.print(array[i][j]+" ");&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t}</template><template autoinsert\="true" context\="java" deleted\="false" description\="lista simplemente enlazada gen\u00E9rica" enabled\="true" name\="listase">public class lista&lt;T&gt; {&\#13;\r\n&\#13;\r\n\tpublic class CElemento{&\#13;\r\n\t\tpublic T dato;&\#13;\r\n\t\tpublic CElemento siguiente;&\#13;\r\n\t\t&\#13;\r\n\t\tpublic CElemento(){&\#13;\r\n\t\t\tsiguiente \= null;&\#13;\r\n\t\t}&\#13;\r\n\t\t&\#13;\r\n\t\tpublic CElemento(T nuevodato){&\#13;\r\n\t\t\tsiguiente \= null;&\#13;\r\n\t\t\tdato \= nuevodato;&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tprivate CElemento lista;&\#13;\r\n\tprivate int tamanio;&\#13;\r\n\t&\#13;\r\n\tpublic int getTamanio(){&\#13;\r\n\t\treturn tamanio;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic lista(){&\#13;\r\n\t\tlista \= null;&\#13;\r\n\t\ttamanio \= 0;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void anadirPrincipio(T obj){&\#13;\r\n\t\tCElemento nuevo \= new CElemento(obj);&\#13;\r\n\t\tnuevo.siguiente\=lista;&\#13;\r\n\t\tlista\=nuevo;&\#13;\r\n\t\ttamanio++;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void anadirFinal(T obj){&\#13;\r\n\t\tCElemento aux;&\#13;\r\n\t\tCElemento nuevo \= new CElemento(obj);&\#13;\r\n\t\tif(lista \=\= null){&\#13;\r\n\t\t\tanadirPrincipio(obj);&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\taux\=lista;&\#13;\r\n\t\t\twhile(aux.siguiente\!\=null)&\#13;\r\n\t\t\t\taux\=aux.siguiente;&\#13;\r\n\t\t\taux.siguiente\=nuevo;&\#13;\r\n\t\t\ttamanio++;&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void anadir(int i, T obj){&\#13;\r\n\t\tif(tamanio\=\=0){&\#13;\r\n\t\t\tanadirPrincipio(obj);&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tCElemento elemAnt \= lista, elemAct \= lista;&\#13;\r\n\t\t&\#13;\r\n\t\t\tfor(int j\=0; j&lt;i; j++){&\#13;\r\n\t\t\t\telemAnt\=elemAct;&\#13;\r\n\t\t\t\telemAct\=elemAct.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t&\#13;\r\n\t\t\tif(elemAnt\=\=elemAct){&\#13;\r\n\t\t\t\tanadirPrincipio(obj);&\#13;\r\n\t\t\t}else{&\#13;\r\n\t\t\t\tanadirFinal(obj);&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t\ttamanio++;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic boolean Buscar(T datobuscado){&\#13;\r\n\t\tboolean res\=false;&\#13;\r\n\t\tCElemento aux\=lista;&\#13;\r\n\t\tif(aux\!\=null){&\#13;\r\n\t\t\twhile((aux.dato\!\=datobuscado)&amp;&amp;(aux.siguiente\!\=null)){&\#13;\r\n\t\t\t\taux\=aux.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\tif(aux.dato\=\=datobuscado){&\#13;\r\n\t\t\t\tres\=true;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t\treturn res;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic T Borrar(int i){&\#13;\r\n\t\t&\#13;\r\n\t\tCElemento elemAct \= null, elemAnt \= null;&\#13;\r\n\t\t&\#13;\r\n\t\tif(i &lt;\= tamanio || i&gt;0){&\#13;\r\n\t\t\telemAct \= lista;&\#13;\r\n\t\t\telemAnt \= lista;&\#13;\r\n\t\t\t&\#13;\r\n\t\t\tfor(int j\=0; j&lt;i; j++){&\#13;\r\n\t\t\t\telemAnt\=elemAct;&\#13;\r\n\t\t\t\telemAct\=elemAct.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\t&\#13;\r\n\t\t\tif(elemAct \=\= lista){&\#13;\r\n\t\t\t\tlista \= lista.siguiente;&\#13;\r\n\t\t\t}else{&\#13;\r\n\t\t\t\telemAnt.siguiente\=elemAct.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t\ttamanio--;&\#13;\r\n\t\t&\#13;\r\n\t\treturn elemAct.dato;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic T obtener(int i){&\#13;\r\n\t\t&\#13;\r\n\t\tCElemento nuevo \= new CElemento();&\#13;\r\n\t\t&\#13;\r\n\t\tif(i &lt;\= tamanio || i&gt;0){&\#13;\r\n\t\t\tnuevo \= lista;&\#13;\r\n\t\t\t&\#13;\r\n\t\t\tfor(int j \= 0; j&lt;i; j++){&\#13;\r\n\t\t\t\tif(nuevo.siguiente\!\=null)&\#13;\r\n\t\t\t\t\tnuevo \= nuevo.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\t&\#13;\r\n\t\t}&\#13;\r\n\t\treturn nuevo.dato;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic T obtenerPrimero(){&\#13;\r\n\t\treturn obtener(0);&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic T obtenerUltimo(){&\#13;\r\n\t\treturn obtener(tamanio-1);&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void Recorrer(){&\#13;\r\n\t\tCElemento aux \= lista;&\#13;\r\n\t\twhile(aux\!\=null){&\#13;\r\n\t\t\t//aux.dato para modificarlo como quisi\u00E9ramos&\#13;\r\n\t\t\taux\=aux.siguiente;&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void BorrarTodo(){&\#13;\r\n\t\tCElemento aux;&\#13;\r\n\t\twhile(lista\!\=null){&\#13;\r\n\t\t\taux\=lista;&\#13;\r\n\t\t\tlista\=lista.siguiente;&\#13;\r\n\t\t\taux.siguiente\=null;&\#13;\r\n\t\t}&\#13;\r\n\t\ttamanio \= 0;&\#13;\r\n\t}&\#13;\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="lista circular gen\u00E9rica" enabled\="true" name\="listac">public class listac&lt;T&gt; {&\#13;\r\n&\#13;\r\n\tprivate class CElemento{&\#13;\r\n\t\tprivate T dato;&\#13;\r\n\t\tprivate CElemento siguiente;&\#13;\r\n\t\t&\#13;\r\n\t\t@SuppressWarnings("unused")&\#13;\r\n\t\tpublic CElemento(){}&\#13;\r\n\t\tpublic CElemento(T d, CElemento s){&\#13;\r\n\t\t\tdato \= d;&\#13;\r\n\t\t\tsiguiente \= s;&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tprivate CElemento ultimo \= null;&\#13;\r\n\tprivate int tamanio;&\#13;\r\n\t&\#13;\r\n\tpublic listac(){&\#13;\r\n\t\ttamanio \= 0;&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic int tamanio() {&\#13;\r\n\t\treturn tamanio;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void addFirst(T dato){&\#13;\r\n\t\tCElemento nuevo \= new CElemento(dato , null);&\#13;\r\n\t\tif(ultimo \!\= null){&\#13;\r\n\t\t\tnuevo.siguiente \= ultimo.siguiente;&\#13;\r\n\t\t\tultimo.siguiente \= nuevo;&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tultimo \= nuevo;&\#13;\r\n\t\t\tultimo.siguiente\= nuevo;&\#13;\r\n\t\t}&\#13;\r\n\t\ttamanio++;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void addLast(T dato){&\#13;\r\n\t\taddFirst(dato);&\#13;\r\n\t\tultimo \= ultimo.siguiente;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic T borrar(){&\#13;\r\n\t\tCElemento q \= ultimo.siguiente;&\#13;\r\n\t\tT obj \= q.dato;&\#13;\r\n&\#13;\r\n\t\tif(ultimo\=\=null){&\#13;\r\n\t\t\tSystem.out.println("Lista vacia");&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tif(q\=\=ultimo){&\#13;\r\n\t\t\t\tultimo\=null;&\#13;\r\n\t\t\t}else{&\#13;\r\n\t\t\t\tultimo.siguiente\=q.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t\ttamanio--;&\#13;\r\n\t\t&\#13;\r\n\t\treturn obj;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic T obtener(int i){&\#13;\r\n\t\t&\#13;\r\n\t\tCElemento aux \= ultimo.siguiente;&\#13;\r\n\t\tT ret \= null;&\#13;\r\n\t\tif(i &lt;\= tamanio()||i&gt;0){&\#13;\r\n\t\t\tfor(int j\=0; j&lt;i ;j++){&\#13;\r\n\t\t\t\taux \= aux.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\tret\=aux.dato;&\#13;\r\n\t\t}&\#13;\r\n\t\treturn ret;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void add(T dato, int i){&\#13;\r\n\t\tif(ultimo \!\= null){&\#13;\r\n\t\t\t&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic String toString(){&\#13;\r\n\t\tString cadena\="";&\#13;\r\n\t\tCElemento aux\=ultimo.siguiente;&\#13;\r\n\t\tfor(int i\=0;i&lt;tamanio();i++){&\#13;\r\n\t\t\tcadena +\= aux.dato.toString()+" \\n";&\#13;\r\n\t\t\taux\=aux.siguiente;&\#13;\r\n\t\t}&\#13;\r\n\t\treturn cadena;&\#13;\r\n\t}&\#13;\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="ejemplo de hashmap" enabled\="true" name\="hashmap">import java.util.*;&\#13;\r\n&\#13;\r\npublic class principal {&\#13;\r\n&\#13;\r\n\tHashMap&lt;String,String&gt; diccionario;&\#13;\r\n\t&\#13;\r\n\tpublic principal(){&\#13;\r\n\t\tdiccionario \= new HashMap&lt;String, String&gt;();&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void insertar(){&\#13;\r\n\t\tdiccionario.put("hola", "hello");&\#13;\r\n\t\tdiccionario.put("adios", "bye");&\#13;\r\n\t\tdiccionario.put("hello", "hola");&\#13;\r\n\t\tdiccionario.put("bye", "adios");&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\t@SuppressWarnings("unchecked")&\#13;\r\n\tpublic void mostrar(){&\#13;\r\n\t\tSet&lt;Map.Entry&lt;String, String&gt;&gt; a \= diccionario.entrySet();&\#13;\r\n\t\t@SuppressWarnings("rawtypes")&\#13;\r\n\t\tIterator it \= a.iterator();&\#13;\r\n\t\tMap.Entry&lt;String, String&gt; elem;&\#13;\r\n\t\t&\#13;\r\n\t\twhile(it.hasNext()){&\#13;\r\n\t\t\telem \= (Map.Entry&lt;String, String&gt;)it.next();&\#13;\r\n\t\t\tSystem.out.println(elem.getKey()+" "+elem.getValue());&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void buscarE(String espa){&\#13;\r\n\t\t&\#13;\r\n\t\tif(diccionario.containsKey(espa)){&\#13;\r\n\t\t\tSystem.out.println("La palabra "+espa+ " en Espa\u00F1ol es\: "+diccionario.get(espa)+" traducido al Ingles");&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tSystem.out.println("La palabra "+espa+ "no esta contemplada en este diccionario");&\#13;\r\n\t\t}&\#13;\r\n\t\t&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void buscarI(String ing){&\#13;\r\n\t\t&\#13;\r\n\t\tif(diccionario.containsValue(ing)){&\#13;\r\n\t\t\tSystem.out.println("La palabra "+ing+" en Ingles es\: "+diccionario.get(ing)+" traducido al Espa\u00F1ol");&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tSystem.out.println("La palabra "+ing+" no esta contemplada en este diccionario");&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="cola dinamica" enabled\="true" name\="colad">public class colad {&\#13;\r\n\t&\#13;\r\n\tprivate class CElemento{&\#13;\r\n\t\tprivate char dato;&\#13;\r\n\t\tprivate CElemento siguiente;&\#13;\r\n\t\t&\#13;\r\n\t\tpublic CElemento(char d){&\#13;\r\n\t\t\tthis.dato\=d;&\#13;\r\n\t\t\tsiguiente\=null;&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tprivate int numElem;&\#13;\r\n\tprivate CElemento cola;&\#13;\r\n\t&\#13;\r\n\tpublic colad(){&\#13;\r\n\t\tnumElem \= 0;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic int size(){&\#13;\r\n\t\treturn numElem;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void push(char c){\t\t//anadir&\#13;\r\n\t\tCElemento ch \= new CElemento(c);&\#13;\r\n\t\tif(\!colaVacia()){&\#13;\r\n\t\t\tch.siguiente \= cola.siguiente;&\#13;\r\n\t\t\tcola.siguiente \= ch;&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tcola \= ch;&\#13;\r\n\t\t\tcola.siguiente \= ch;&\#13;\r\n\t\t}&\#13;\r\n\t\tcola \= cola.siguiente;&\#13;\r\n\t\tnumElem++;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic char pop(){\t\t\t\t//obtener&\#13;\r\n\t\tCElemento aux \= cola.siguiente;&\#13;\r\n\t\tchar obj \= aux.dato;&\#13;\r\n&\#13;\r\n\t\tif(colaVacia()){&\#13;\r\n\t\t\tSystem.out.println("Lista vacia");&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tif(aux \=\= cola){&\#13;\r\n\t\t\t\tcola \= null;&\#13;\r\n\t\t\t}else{&\#13;\r\n\t\t\t\tcola.siguiente \= aux.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t\tnumElem--;&\#13;\r\n\t\treturn obj;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic boolean colaVacia(){&\#13;\r\n\t\treturn (numElem \=\= 0);&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic String toString(char ch){&\#13;\r\n\t\tString cadena \= "";&\#13;\r\n\t\tcadena +\= String.valueOf(ch);&\#13;\r\n\t\treturn cadena;&\#13;\r\n\t}&\#13;\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="pila dinamica" enabled\="true" name\="pilad">public class pilad {&\#13;\r\n&\#13;\r\n\tprivate class CElemento{&\#13;\r\n\t\tprivate char dato;&\#13;\r\n\t\tprivate CElemento siguiente;&\#13;\r\n\t\t&\#13;\r\n\t\tpublic CElemento(char d){&\#13;\r\n\t\t\tthis.dato\=d;&\#13;\r\n\t\t\tsiguiente\=null;&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tprivate int numElem;&\#13;\r\n\tprivate CElemento pila;&\#13;\r\n\t&\#13;\r\n\tpublic pilad(){&\#13;\r\n\t\tnumElem \= 0;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic int size(){&\#13;\r\n\t\treturn numElem;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic void push(char d){\t\t//anadir&\#13;\r\n\t\tCElemento ch \= new CElemento(d);&\#13;\r\n\t\tif (\!pilaVacia()) {&\#13;\r\n\t\t\tch.siguiente \= pila.siguiente;&\#13;\r\n\t\t\tpila.siguiente \= ch;&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tpila \= ch;&\#13;\r\n\t\t\tpila.siguiente \= ch;&\#13;\r\n\t\t}&\#13;\r\n\t\tnumElem++;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic char pop(){\t\t\t\t//obtener&\#13;\r\n\t\tCElemento q \= pila.siguiente;&\#13;\r\n\t\tchar obj \= q.dato;&\#13;\r\n&\#13;\r\n\t\tif(pilaVacia()){&\#13;\r\n\t\t\tSystem.out.println("Pila vacia");&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tif(q \=\= pila){&\#13;\r\n\t\t\t\tpila \= null;&\#13;\r\n\t\t\t}else{&\#13;\r\n\t\t\t\tpila.siguiente \= q.siguiente;&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t\tnumElem--;&\#13;\r\n&\#13;\r\n\t\treturn obj;&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic boolean pilaVacia(){&\#13;\r\n\t\treturn (numElem \=\= 0);&\#13;\r\n\t}&\#13;\r\n\t&\#13;\r\n\tpublic String toString(char ch){&\#13;\r\n\t\tString cadena \= "";&\#13;\r\n\t\tcadena +\= String.valueOf(ch);&\#13;\r\n\t\treturn cadena;&\#13;\r\n\t}&\#13;\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="palindromo incluyendo pilad y colad" enabled\="true" name\="palindromo">import java.util.*;&\#13;\r\n&\#13;\r\npublic class test{&\#13;\r\n\t&\#13;\r\n\tpublic static boolean isIgual(colad c,pilad p){&\#13;\r\n\t\tboolean igual \= false;&\#13;\r\n\t\tif(c.toString(c.pop()).compareToIgnoreCase(p.toString(p.pop()))\=\=0)&\#13;\r\n\t\t\tigual \= true;&\#13;\r\n\t\t&\#13;\r\n\t\treturn igual;&\#13;\r\n\t}&\#13;\r\n&\#13;\r\n\tpublic static void main(String[] args){&\#13;\r\n\t\t&\#13;\r\n\t\tpilad pila \= new pilad();&\#13;\r\n\t\tcolad cola \= new colad();&\#13;\r\n\t\tArrayList&lt;Character&gt; ch \= new ArrayList&lt;Character&gt;();&\#13;\r\n\t\tScanner lector \= new Scanner(System.in);&\#13;\r\n\t\tString cadena \= "";&\#13;\r\n\t\tint i \= 0;&\#13;\r\n\t\t&\#13;\r\n\t\t&\#13;\r\n\t\tSystem.out.print("Introduzca palindromo\:");&\#13;\r\n\t\tcadena \= lector.nextLine();&\#13;\r\n\t\t&\#13;\r\n\t\twhile(i&lt;cadena.length()){&\#13;\r\n\t\t\tch.add(cadena.charAt(i));&\#13;\r\n\t\t\tif(cadena.charAt(i)\!\=' '){&\#13;\r\n\t\t\t\tcola.push(ch.get(i));&\#13;\r\n\t\t\t\tpila.push(ch.get(i));&\#13;\r\n\t\t\t}&\#13;\r\n\t\t\ti++;&\#13;\r\n\t\t}&\#13;\r\n\t\t&\#13;\r\n\t\tif(isIgual(cola,pila)){&\#13;\r\n\t\t\tSystem.out.println("La frase o palabra \\""+cadena+"\\" es un palindromo");&\#13;\r\n\t\t}else{&\#13;\r\n\t\t\tSystem.out.println("La frase o palabra \\""+cadena+"\\" NO es un palindromo");&\#13;\r\n\t\t}&\#13;\r\n\t}&\#13;\r\n}</template></templates>
content_assist_lru_history=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><history maxLHS\="100" maxRHS\="10"/>
spelling_ignore_sentence=true
org.eclipse.jdt.ui.text.code_templates_migrated=true
